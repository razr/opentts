
# Global configuration for openttsd
# ==========================================

# -----SYSTEM OPTIONS-----

# CommunicationMethod specifies the method to be used by openttsd to
# communicate with its clients.
# The supported methods are "unix_socket" and "inet_socket".
#
# unix_socket -- communication over Unix sockets represented by a file in the
# filesystem (see SocketName below). This method works only locally, but is
# prefered for standard session setup, where every user runs his own instance
# of openttsd to get voice feedback on his own computer.
#
# inet_socket -- alternatively, you can start openttsd on
# a TCP port and connect to it via hostname/port. This allows for a more
# flexible setup, where you can use openttsd over network
# from different machines. See also the Port and LocalhostAccessOnly
# configuration variables.
#
# CommunicationMethod "unix_socket"

# SocketName is either "default" or a full path to the filesystem
# where the driving Unix socket file should be created in case the
# CommunicationMethod is set to "unix_socket". The default is
# ~/.opentts/opentts.sock
# Do not change this unless you have a reason and know what you are doing.

# SocketName "default"

# The Port on which openttsd should be available to clients if the "inet_socket"
# communication method is used.

# Port 6560

# By default, if "inet_socket" communication method is used, the specified
# port is opened only for connections coming from localhost.
# If LocalhostAccessOnly is set to 0 it disables this
# access controll. It means that the port will be accessible from all
# computers on the network.
# If you turn off this option, please make sure you set up some system
# rules specifying which computers are and are not allowed to access
# the openttsd port.

# LocalhostAccessOnly 1

# -----LOGGING CONFIGURATION-----

# The LogLevel is a number between 0 and 5 that specifies
# how much of the logging information should be printed
# out on the screen or in the logfile (see LogFile)
# 0 means nothing, 5 means everything (not recommended).

LogLevel  3

# The LogDir specifies where openttsd writes its logging messages
# (status information, error messages, etc.).  Specify "stdout" for
# standard console output or a directory path. 'default' means that
# the logs are written to the default destination (e.g. a preconfigured
# system directory or the home directory if .opentts is present)
# DO NOT COMMENT OUT THIS OPTION, SET IT TO "default" if you do not
# want to influence it.

LogDir  "default"
#LogDir  "/var/log/opentts/"
#LogDir  "stdout"

# The CustomLogFile allows logging all messages of the given kind,
# regardless their priority, to the given destination.

#CustomLogFile "protocol" "/var/log/opentts/openttsd-protocol.log"

# ----- VOICE PARAMETERS -----

# The DefaultRate controls how fast the synthesizer is going to speak.
# The value must be between -100 (slowest) and +100 (fastest), default
# is 0.

# DefaultRate  0

# The DefaultPitch controls the pitch of the synthesized voice.  The
# value must be between -100 (lowest) and +100 (highest), default is
# 0.

# DefaultPitch  0

# The DefaultVolume controls the default volume of the voice.  It is
# a value between -100 (softly) and +100 (loudly).  Currently, +100
# maps to the default volume of the synthesizer.

DefaultVolume 100

# The DefaultVoiceType controls which voice type should be used by
# default.  Voice types are symbolic names which map to particular
# voices provided by the synthesizer according to the output module
# configuratuion.  Please see the synthesizer-specific configuration
# in etc/opentts/modules/ to see which voices are assigned to
# different symbolic names.  The following symbolic names are
# currently supported: MALE1, MALE2, MALE3, FEMALE1, FEMALE2, FEMALE3,
# CHILD_MALE, CHILD_FEMALE

# DefaultVoiceType  "MALE1"

# The Default language with which to speak

# DefaultLanguage "en"

# ----- MESSAGE DISPATCHING CONTROLL -----

# The DefaultClientName specifies the name of a client who didn't
# introduce himself at the beginning of an SSIP session.

# DefaultClientName  "unknown:unknown:unknown"

# The Default Priority. Use with caution, normally this shouldn't be
# changed globally (at this place)

# DefaultPriority  "text"

# The DefaultPauseContext specifies by how many index marks a speech
# cursor should return when resuming after a pause. This is roughly
# equivalent to the number of sentences before the place of the
# execution of pause that will be repeated.

# DefaultPauseContext 0

# -----SPELLING/PUNCTUATION/CAPITAL LETTERS  CONFIGURATION-----

# The DefaultPunctuationMode sets the way dots, comas, exclamation
# marks, question marks etc. are interpreted.  none: they are ignored
# some: some of them are sent to synthesis (see
# DefaultPunctuationSome) all: all punctuation marks are sent to
# synthesis

# DefaultPunctuationMode "none"

# The DefaultCapLetRecognition: if set to "spell", capital letters
# should be spelled (e.g. "capital b"), if set to "icon",
# capital letters are indicated by inserting a special sound
# before them but they should be read normally, it set to "none"
# capital letters are not recognized (by default)

# DefaultCapLetRecognition  "none"

# The DefaultSpelling: if set to On, all messages will be spelled
# unless set otherwise (this is usually not something you want to do.)

# DefaultSpelling  Off

# ----- AUDIO CONFIGURATION -----------

# -- AUDIO OUTPUT --

# Chooses between four possible sound output systems:
#       "oss"   - Open Sound System
#       "alsa"  - Advanced Linux Sound System
#       "nas"   - Network Audio System
#       "pulse" - PulseAudio
# ALSA is default and recommended. The recent implementations
# support mixing of multiple streams. OSS is only provided
# for compatibility with architectures that do not include ALSA.
# NAS is an audio server with higher level of control over
# your audio stream, with the possibility to stream your audio
# over the network to a different computer and other advanced
# features. (The NAS backend is not very well tested however.)
# PulseAudio is a sound server for POSIX and WIN32 systems. 
#
# If the argument is a comma separated list, each audio output system
# will be tried in succession.
#

# AudioOutputMethod "pulse,alsa"

# The ALSA device to use when Advanced Linux Sound Architecture is
# chosen for the audio output.

#AudioALSADevice "default"

# -- PulseAudio parameters --

#AudioPulseServer "default"

# Maximum length of the buffer

#AudioPulseMaxLength -1

# Target length of the buffer
# The server tries to assure that at least FestivalPulseTargetLength
# bytes are always available in the buffer

#AudioPulseTargetLength 4410

# Pre-buffering
# The server does not start with playback before at least 
# FestivalPulsePrebuffering bytes are available in the buffer

#AudioPulsePreBuffering -1

# Minimum request
# The server does not request less than FestivalPulseMinRequest bytes
# from the client, instead waits until the buffer is free enough to
# request more bytes at once

#AudioPulseMinRequest -1

# -- OSS parameters --

# The OSS device to use when Open Sound System is
# chosen for the audio output.

#AudioOSSDevice "/dev/dsp"

# -- NAS parameters --

# Route to the Network Audio System server when NAS
# was chosen for the audio output. Note that NAS
# server doesn't need to run on your machine,
# you can use it also over network (for instance
# when working on remote machines).

#AudioNASServer "tcp/localhost:5450"



# -----OUTPUT MODULES CONFIGURATION-----

# Each AddModule line loads an output module.
#  Syntax: AddModule "name" "binary" "configuration" "logfile"
#  - name is the name under which you can acces this module
#  - binary is the path to the binary executable of this module,
#    either relative (to lib/opentts/modules/) or absolute
#  - configuration is the path to the config file of this module,
#    either relative (to etc/opentts/modules/) or absolute

AddModule "espeak"       "espeak"   "espeak.conf"
AddModule "festival"     "festival"  "festival.conf"
AddModule "flite"        "flite"     "flite.conf"
AddModule "ivona"	 "ivona"    "ivona.conf"
#AddModule "espeak-generic" "generic" "espeak-generic.conf"
#AddModule "espeak-mbrola-generic" "generic" "espeak-mbrola-generic.conf"
#AddModule "swift-generic" "generic" "swift-generic.conf"
#AddModule "epos-generic" "generic"   "epos-generic.conf"
#AddModule "dtk-generic"  "generic"   "dtk-generic.conf"
#AddModule "ibmtts"       "ibmtts"    "ibmtts.conf"
#AddModule "cicero"        "cicero"     "cicero.conf"

# DO NOT REMOVE the following line unless you have
# a specific reason -- this is the fallback output module
# that is only used when no other modules are in use
AddModule "dummy"         "dummy"      ""

# The output module testing doesn't actually connect to anything. It
# outputs the requested commands to standard output and reads
# responses from stdandard input. This way, openttsd's
# communication with output modules can be tested easily.

# AddModule "testing"

# The DefaultModule selects which output module is the default.  You
# must use one of the names of the modules loaded with AddModule.

DefaultModule espeak

# The LanguageDefaultModule selects which output modules are prefered
# for specified languages.

#LanguageDefaultModule "en"  "espeak"
#LanguageDefaultModule "cs"  "festival"
#LanguageDefaultModule "es"  "festival"

# -----CLIENT SPECIFIC CONFIGURATION-----

# Here you can include the files with client-specific configuration
# for different types of clients. They must contain one or more sections with
# this structure:
#     BeginClient "emacs:*"
#          DefaultPunctuationMode "some"
#          ...and/or some other settings
#     EndClient
# The parameter of BeginClient tells openttsd to which clients
# it should apply this settings (it does glob-style matching, you can use
# * to match any number of characters and ? to match one character)

# There are some sample client settings

Include "clients/*.conf"
